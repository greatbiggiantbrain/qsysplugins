-- Clock Audio CDT100 Plugin for Q-SYS
-- by Joe Peavey / QSC Boulder
-- June 2017

PluginInfo = 
{
  Name = "Clock Audio~CDT100",
  Version = "1.1",
  Id = "84e79909-53a3-47c5-c772-39886c9b03d7",
  Description = "Clock Audio CDT100 Mk1 with Brightness",
  ShowDebug = false
}

function GetPrettyName(props)
  return "Clock Audio CDT100"
end

function GetColor(props)
  return { 0, 127, 255 }
end

function WebToRgb(color) -- Converts Web Hex strings or decimal values to RGB table
  if type(color)=="string" then color = tonumber(color,16) end
  local rgb,rh,gh,bh = {},string.match(string.format("%06x",color),"(%x%x)(%x%x)(%x%x)")
  for _,h in ipairs{rh,gh,bh} do table.insert(rgb,tonumber(h,16)) end
  return load("return {"..table.concat(rgb,",").."}")()
end

function GetProperties() -- No properties needed
  props = {}
  return props
end

function GetControls(props)
  return
  {
    {
      Name = "ip",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "connect",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "nic",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "rxport",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 0,
      Max = 65535,
      Count = 1,
    },
    {
      Name = "swaddr",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "id",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "status",
      ControlType = "Indicator",
      IndicatorType = "Status",
      UserPin = true,
      PinStyle = "Output",
      Count = 1,
    },
    {
      Name = "phantom",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 4,
    },
    {
      Name = "armc",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "ledg",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 4,
    },
    {
      Name = "ledr",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 4,
    },
    {
      Name = "brightr",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 1,
      Max = 10,
      UserPin = true,
      PinStyle = "Both",
      Count = 4,
    },
    {
      Name = "brightg",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 1,
      Max = 10,
      UserPin = true,
      PinStyle = "Both",
      Count = 4,
    },
    {
      Name = "bstat",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Output",
      Count = 4,
    },
    {
      Name = "psload",
      ControlType = "Button",
      ButtonType = "Trigger",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "pssave",
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "fwver",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Output",
      Count = 1
    },
    {
      Name = "bootver",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Output",
      Count = 1
    },
  }
end

function GetControlLayout(props)
  local White = { 255, 255, 255 }
  local LtGray = { 204, 204, 204 }
  local GroupFill = { 86, 122, 138 }
  local LtBlue = { 165, 216, 246 }
  local BtnBlue = { 0, 181, 239 }
  local BtnLtBlue = { 0, 174, 237 }
  local BtnDkBlue = { 0, 43, 64 }
  local BtnGray = { 102, 102, 102 }
  local LEDGrn = { 128, 255, 0 }
  local LEDRed = { 255, 0, 36 }
  local LEDAmb = { 248, 244, 0 }
  local lc = { "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48IURPQ1RZUEUgc3ZnIFBVQkxJQyAiLS8vVzNDLy9EVEQgU1ZHIDEuMS8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGQiPjxzdmcgdmVyc2lvbj0iMS4xIiB","pZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiIHdpZHRoPSI"}
  local l = {
    ca  = lc[1].."",
    dt  = lc[1]..lc[2].."xMTJweCIgaGVpZ2h0PSIyNXB4IiB2aWV3Qm94PSIwIDAgMTEyIDI1IiBlbmFibGUtYmFja2dyb3VuZD0ibmV3IDAgMCAxMTIgMjUiIHhtbDpzcGFjZT0icHJlc2VydmUiPjxnPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik0xNS41MDUsMTQuNjA0aC0zLjQzOHYtMy40NmgzLjM4OWMxLjAwNCwwLDEuNDIxLDAuMjU1LDEuNDIxLDAuNzY5djEuOTNDMTYuODc3LDE0LjMwNSwxNi40MTksMTQuNjA0LDE1LjUwNSwxNC42MDR6IE0xNS40NTYsMTIuMDUzYzAtMC4xMjUtMC4zMTgtMC4xNjEtMC40OTctMC4xNjFoLTEuNDYxdjEuOTcyaDEuNDYxYzAuNDM3LDAsMC40OTctMC4wODMsMC40OTctMC4zVjEyLjA1M3oiLz48cGF0aCBmaWxsPSIjRkZGRkZGIiBkPSJNMjEuODI5LDE0LjYwNGwtMC40NDctMC43NDFoLTIuMDE3bC0wLjQ0NywwLjc0MWgtMS40OTFsMS44MjktMy4wMjljMC4xNjktMC4yOCwwLjUzNy0wLjQ2MiwxLjEyMy0wLjQ2MmMwLjU3NiwwLDAuOTQ0LDAuMTgyLDEuMTEzLDAuNDYybDEuODI5LDMuMDI5SDIxLjgyOXogTTIwLjI3OSwxMi4wMzdsLTAuNDg3LDEuMTIxaDEuMTYzTDIwLjI3OSwxMi4wMzd6Ii8+PHBhdGggZmlsbD0iI0ZGRkZGRiIgZD0iTTI3LjQwOCwxNC42NTJjLTAuNzA2LDAtMS4wNjMtMC4yNDgtMS4yMzItMC41OGwtMS4wMTQtMS45ODh2Mi41MjFIMjMuOHYtMi43N2MwLTAuNDA1LDAuMzY4LTAuNzI3LDEuMjAzLTAuNzI3YzAuNjg2LDAsMS4wODMsMC4yMzksMS4yNDIsMC41NjZsMC45OTQsMi4wMDJ2LTIuNTMyaDEuMzYydjIuODY0QzI4LjYwMSwxNC4zNjEsMjguMTA0LDE0LjY1MiwyNy40MDgsMTQuNjUyeiIvPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik0zMi4wNTIsMTEuODkydjIuNzEzaC0xLjQyMXYtMi43MTNIMjkuMjF2LTAuNzQ3aDQuMjczdjAuNzQ3SDMyLjA1MnoiLz48cGF0aCBmaWxsPSIjRkZGRkZGIiBkPSJNMzUuNjgyLDE0LjYwNGMtMC45MzUsMC0xLjU5LTAuMTk2LTEuNTktMC43MjF2LTEuOTg2YzAtMC40NTcsMC40ODctMC43NTMsMS4zODEtMC43NTNoMi45NTJ2MC43NDdoLTIuMzM2aC0wLjIzOGMtMC4yMjksMC0wLjMyOCwwLjEyNS0wLjMyOCwwLjIyNHYwLjM3OWgyLjkwMnYwLjc0N2gtMi45MDJ2MC4zODRjMCwwLjIzMywwLjIwOSwwLjIzOCwwLjU3NywwLjIzOGgyLjMyNnYwLjc0MUgzNS42ODJ6Ii8+PHBhdGggZmlsbD0iI0ZGRkZGRiIgZD0iTTQ0LjQzLDExLjg5MnYyLjcxM2gtMS40MXYtMi43MTNoLTEuNDExdi0wLjc0N2g0LjI0MXYwLjc0N0g0NC40M3oiLz48cGF0aCBmaWxsPSIjRkZGRkZGIiBkPSJNNDkuNTEzLDE0LjYwNGwtMS40ODktMS4yODVjLTAuMDgtMC4wNjgtMC4xMDgtMC4xNTYtMC4xMDgtMC4yMzRjMC0wLjI3OSwwLjMxNS0wLjQ3MiwwLjg1Ny0wLjQ3MmgwLjU2M2MwLjI2NywwLDAuMzg1LTAuMDU4LDAuMzg1LTAuMTk3VjEyLjFjMC0wLjE0Ni0wLjE4OC0wLjIwOC0wLjQ0NC0wLjIwOGgtMS40djIuNzEzaC0xLjQxbC0wLjAxLTMuNDZoMy4zMTRjMC44MzksMCwxLjM2MSwwLjI1NSwxLjM2MSwwLjd2MC42OTZjMCwwLjM5NC0wLjQ5MiwwLjctMS4yNjMsMC43Yy0wLjA5OCwwLTAuMTg4LTAuMDA2LTAuMjg2LTAuMDA2bDEuNjA4LDEuMzY5SDQ5LjUxM3oiLz48cGF0aCBmaWxsPSIjRkZGRkZGIiBkPSJNNTUuOTA3LDE0LjYwNGwtMC40NDQtMC43NDFoLTIuMDAybC0wLjQ0MywwLjc0MWgtMS40NzlsMS44MTUtMy4wMjljMC4xNjctMC4yOCwwLjUzMi0wLjQ2MiwxLjExNC0wLjQ2MmMwLjU3MiwwLDAuOTM3LDAuMTgyLDEuMTA0LDAuNDYybDEuODE1LDMuMDI5SDU1LjkwN3ogTTU0LjM2OSwxMi4wMzdsLTAuNDg0LDEuMTIxaDEuMTU1TDU0LjM2OSwxMi4wMzd6Ii8+PHBhdGggZmlsbD0iI0ZGRkZGRiIgZD0iTTYxLjQ0NCwxNC42NTJjLTAuNywwLTEuMDU2LTAuMjQ4LTEuMjI0LTAuNThsLTEuMDA2LTEuOTg4djIuNTIxaC0xLjM1MnYtMi43N2MwLTAuNDA1LDAuMzY1LTAuNzI3LDEuMTk0LTAuNzI3YzAuNjgxLDAsMS4wNzUsMC4yMzksMS4yMzIsMC41NjZsMC45ODYsMi4wMDJ2LTIuNTMyaDEuMzUydjIuODY0QzYyLjYyOCwxNC4zNjEsNjIuMTM1LDE0LjY1Miw2MS40NDQsMTQuNjUyeiIvPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik02Ni4zMjgsMTQuNjA0aC0yLjc5MXYtMC43NDFoMi4yODljMC42MjEsMCwwLjUwMi0wLjE5NiwwLjUwMi0wLjQ1MWMwLTAuMTY1LTAuMjI1LTAuMTcxLTAuNDYyLTAuMTcxSDY0Ljg1Yy0wLjcxOSwwLTEuMzIyLTAuMjk2LTEuMzIyLTAuNjc5VjExLjgzYzAtMC4yMDMsMC4xODgtMC40NTgsMC41MDQtMC41NzZjMC4yMzYtMC4wODgsMC41NjMtMC4xMDksMC44MzgtMC4xMDloMi44NzF2MC43NDdoLTIuMjg5Yy0wLjYxMSwwLTAuNTE0LDAuMTQxLTAuNTE0LDAuNDA0YzAsMC4xNjEsMC4xODgsMC4xOTgsMC40NjUsMC4xOThoMS4wMjVjMC43OTksMCwxLjMxMywwLjI2NSwxLjMxMywwLjY4NXYwLjY5NkM2Ny43NCwxNC4zMzEsNjcuMTg4LDE0LjYwNCw2Ni4zMjgsMTQuNjA0eiIvPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik03Mi4wMTQsMTMuMzZoLTEuOTgydjEuMjQ0SDY4LjYxdi0zLjQ2aDMuMjk1YzAuODA5LDAsMS40MSwwLjI1LDEuNDEsMC42OXYwLjg0NkM3My4zMTUsMTMuMTAxLDcyLjgwMywxMy4zNiw3Mi4wMTQsMTMuMzZ6IE03MS45MDUsMTIuMWMwLTAuMTYxLTAuMTY4LTAuMjEzLTAuNDU0LTAuMjEzbC0xLjQyLDAuMDA1djAuNzA2aDEuMzgxYzAuMjg2LDAsMC40OTMtMC4wMDYsMC40OTMtMC4xODdWMTIuMXoiLz48cGF0aCBmaWxsPSIjRkZGRkZGIiBkPSJNNzcuMzA0LDE0LjYwNGgtMS42NjdjLTAuMzQ1LDAtMC43NC0wLjAxNS0xLjAxNi0wLjEzNGMtMC4zMTUtMC4xMzUtMC40NzQtMC4zOTgtMC40NzQtMC42MDd2LTEuOTcyYzAtMC4yMjMsMC4xNTgtMC40NjcsMC40OTMtMC42MTJjMC4yNzUtMC4xMTksMC42NTEtMC4xMzUsMC45OTYtMC4xMzVoMS42NzhjMC45NzcsMCwxLjQ2OSwwLjIyNCwxLjQ2OSwwLjc0N3YxLjk3MkM3OC43ODMsMTQuMzgzLDc4LjI2MSwxNC42MDQsNzcuMzA0LDE0LjYwNHogTTc3LjM3MywxMi4xM2MwLTAuMTg3LTAuMTA4LTAuMjM4LTAuNDY0LTAuMjM4aC0wLjg2OGMtMC4zNTUsMC0wLjQ3MywwLjA0Ny0wLjQ3MywwLjIzOHYxLjQ4OWMwLDAuMTgzLDAuMTM3LDAuMjQ0LDAuNDczLDAuMjQ0aDAuODY4YzAuMzI1LDAsMC40NjQtMC4wMzYsMC40NjQtMC4yMTdWMTIuMTN6Ii8+PHBhdGggZmlsbD0iI0ZGRkZGRiIgZD0iTTgyLjc4MSwxNC42MDRsLTEuNDg5LTEuMjg1Yy0wLjA3OS0wLjA2OC0wLjEwOC0wLjE1Ni0wLjEwOC0wLjIzNGMwLTAuMjc5LDAuMzE1LTAuNDcyLDAuODU4LTAuNDcyaDAuNTYyYzAuMjY3LDAsMC4zODUtMC4wNTgsMC4zODUtMC4xOTdWMTIuMWMwLTAuMTQ2LTAuMTg4LTAuMjA4LTAuNDQzLTAuMjA4aC0xLjR2Mi43MTNoLTEuNDFsLTAuMDExLTMuNDZoMy4zMTRjMC44MzgsMCwxLjM2LDAuMjU1LDEuMzYsMC43djAuNjk2YzAsMC4zOTQtMC40OTIsMC43LTEuMjYyLDAuN2MtMC4wOTksMC0wLjE4OC0wLjAwNi0wLjI4Ni0wLjAwNmwxLjYwNiwxLjM2OUg4Mi43ODF6Ii8+PHBhdGggZmlsbD0iI0ZGRkZGRiIgZD0iTTg3Ljk1MywxMS44OTJ2Mi43MTNoLTEuNDF2LTIuNzEzaC0xLjQxdi0wLjc0N2g0LjI0djAuNzQ3SDg3Ljk1M3oiLz48cGF0aCBmaWxsPSIjRkZGRkZGIiBkPSJNOTEuNTU2LDE0LjYwNGMtMC45MjcsMC0xLjU3OS0wLjE5Ni0xLjU3OS0wLjcyMXYtMS45ODZjMC0wLjQ1NywwLjQ4NC0wLjc1MywxLjM3MS0wLjc1M2gyLjkzdjAuNzQ3aC0yLjMxNmgtMC4yMzdjLTAuMjI4LDAtMC4zMjUsMC4xMjUtMC4zMjUsMC4yMjR2MC4zNzloMi44Nzl2MC43NDdoLTIuODc5djAuMzg0YzAsMC4yMzMsMC4yMDYsMC4yMzgsMC41NzEsMC4yMzhoMi4zMDh2MC43NDFIOTEuNTU2eiIvPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik05OC4xOTUsMTQuNjA0bC0xLjQ4OC0xLjI4NWMtMC4wNzktMC4wNjgtMC4xMDgtMC4xNTYtMC4xMDgtMC4yMzRjMC0wLjI3OSwwLjMxNS0wLjQ3MiwwLjg1Ny0wLjQ3MmgwLjU2M2MwLjI2NywwLDAuMzg1LTAuMDU4LDAuMzg1LTAuMTk3VjEyLjFjMC0wLjE0Ni0wLjE4OC0wLjIwOC0wLjQ0My0wLjIwOGgtMS40MDF2Mi43MTNoLTEuNDA5bC0wLjAxMS0zLjQ2aDMuMzE0YzAuODM4LDAsMS4zNjEsMC4yNTUsMS4zNjEsMC43djAuNjk2YzAsMC4zOTQtMC40OTQsMC43LTEuMjYzLDAuN2MtMC4wOTksMC0wLjE4OC0wLjAwNi0wLjI4Ni0wLjAwNmwxLjYwNywxLjM2OUg5OC4xOTV6Ii8+PC9nPjwvc3ZnPg==",
    cdt = lc[1]..lc[2].."1OXB4IiBoZWlnaHQ9IjIycHgiIHZpZXdCb3g9IjAgMCA1OSAyMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgNTkgMjIiIHhtbDpzcGFjZT0icHJlc2VydmUiPjxnPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik0xMi44ODQsMTMuOTk1Yy0wLjQyLDAtMC44NzUtMC4xMTctMS4xNzUtMC4yNzJjLTAuMzQ4LTAuMTgyLTAuNDQ0LTAuNDM1LTAuNDQ0LTAuNjg4di0yLjM4MWMwLTAuMjk5LDAuMDEyLTAuNTY0LDAuNDMyLTAuNzg1YzAuMzg0LTAuMjA4LDAuOTM2LTAuMjAxLDEuNDUxLTAuMjAxaDMuMzQ2djAuOTM1aC0yLjg2NmMtMC4yNCwwLTAuNjM2LDAuMDEzLTAuNjM2LDAuMTg4djEuODk1YzAsMC4yOTIsMC4wODQsMC4zODMsMC42NDgsMC4zODNoMi44NTR2MC45MjhIMTIuODg0eiIvPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik0yMS40MjMsMTMuOTk1aC00LjE1VjkuNjY4aDQuMDljMS4yMTEsMCwxLjcxNSwwLjMxOCwxLjcxNSwwLjk2djIuNDE0QzIzLjA3OCwxMy42MTksMjIuNTI3LDEzLjk5NSwyMS40MjMsMTMuOTk1eiBNMjEuMzYzLDEwLjgwNGMwLTAuMTU2LTAuMzg0LTAuMjAxLTAuNi0wLjIwMUgxOXYyLjQ2NWgxLjc2M2MwLjUyOCwwLDAuNi0wLjEwNCwwLjYtMC4zNzZWMTAuODA0eiIvPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik0yNy4wODQsMTAuNjAzdjMuMzkzaC0xLjcxNXYtMy4zOTNoLTEuNzE1VjkuNjY4aDUuMTU3djAuOTM1SDI3LjA4NHoiLz48cGF0aCBmaWxsPSIjRkZGRkZGIiBkPSJNMzEuMTA3LDEzLjk5NVY5LjY2OGgxLjcyN3Y0LjMyN0gzMS4xMDd6Ii8+PHBhdGggZmlsbD0iI0ZGRkZGRiIgZD0iTTQwLjk2NywxMy44MTljLTAuMzM2LDAuMTQ5LTAuODA1LDAuMTc2LTEuMjI1LDAuMTc2aC0yLjAyNmMtMS4xNTEsMC0xLjc4Ny0wLjI5Mi0xLjc4Ny0wLjkyOHYtMi40NjVjMC0wLjI4NSwwLjE1Ni0wLjU0NSwwLjU3NS0wLjczM2MwLjM4NS0wLjE2OCwwLjczMi0wLjIwMSwxLjIxMi0wLjIwMWgyLjAzOWMwLjQ3OSwwLDAuODI3LDAuMDMzLDEuMjEyLDAuMjAxYzAuNDE5LDAuMTg4LDAuNTc1LDAuNDQ4LDAuNTc1LDAuNzMzdjIuNDY1QzQxLjU0MiwxMy4zNCw0MS4zNzQsMTMuNjQ1LDQwLjk2NywxMy44MTl6IE0zOS44MjYsMTAuOWMwLTAuMjMzLTAuMTMxLTAuMjk4LTAuNTYzLTAuMjk4aC0xLjA1N2MtMC40MzIsMC0wLjU2MywwLjA2NC0wLjU2MywwLjI5OHYxLjg2MmMwLDAuMjMzLDAuMTMxLDAuMzA1LDAuNTYzLDAuMzA1aDEuMDU3YzAuNDMyLDAsMC41NjMtMC4wNzEsMC41NjMtMC4zMDVWMTAuOXoiLz48cGF0aCBmaWxsPSIjRkZGRkZGIiBkPSJNNDcuNjE5LDEzLjgxOWMtMC4zMzYsMC4xNDktMC44MDUsMC4xNzYtMS4yMjUsMC4xNzZoLTIuMDI2Yy0xLjE1MSwwLTEuNzg3LTAuMjkyLTEuNzg3LTAuOTI4di0yLjQ2NWMwLTAuMjg1LDAuMTU2LTAuNTQ1LDAuNTc1LTAuNzMzYzAuMzg1LTAuMTY4LDAuNzMyLTAuMjAxLDEuMjEyLTAuMjAxaDIuMDM5YzAuNDc5LDAsMC44MjcsMC4wMzMsMS4yMTIsMC4yMDFjMC40MTksMC4xODgsMC41NzUsMC40NDgsMC41NzUsMC43MzN2Mi40NjVDNDguMTk0LDEzLjM0LDQ4LjAyNiwxMy42NDUsNDcuNjE5LDEzLjgxOXogTTQ2LjQ3OSwxMC45YzAtMC4yMzMtMC4xMzEtMC4yOTgtMC41NjMtMC4yOThoLTEuMDU3Yy0wLjQzMiwwLTAuNTYzLDAuMDY0LTAuNTYzLDAuMjk4djEuODYyYzAsMC4yMzMsMC4xMzEsMC4zMDUsMC41NjMsMC4zMDVoMS4wNTdjMC40MzIsMCwwLjU2My0wLjA3MSwwLjU2My0wLjMwNVYxMC45eiIvPjwvZz48L3N2Zz4=",
    fc  = lc[1]..lc[2].."3MXB4IiBoZWlnaHQ9IjIzcHgiIHZpZXdCb3g9IjAgMCA3MSAyMyIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgNzEgMjMiIHhtbDpzcGFjZT0icHJlc2VydmUiPjxnPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik0xNy4yODUsMTIuMzN2LTAuOTk3aC0xLjg5MmMtMC40NjYsMC0wLjc5LTAuMDE3LTEuMDkzLTAuMjIzYy0wLjE0Mi0wLjA5Mi0wLjIzMy0wLjIwNS0wLjIzMy0wLjMyNGMwLTAuMDgxLDAuMDQxLTAuMTYzLDAuMTAxLTAuMjM4bDEuMzk2LTEuODMyaDEuNTY4bC0xLjQwNiwxLjg0MmgxLjU1OVY4LjcxNmgxLjQ1N3YzLjYxNEgxNy4yODV6Ii8+PHBhdGggZmlsbD0iI0ZGRkZGRiIgZD0iTTIzLjcyOSwxMi4zM2MtMC4zNTEsMC0wLjczMi0wLjA5OC0wLjk4Mi0wLjIyOGMtMC4yOTEtMC4xNTEtMC4zNzEtMC4zNjMtMC4zNzEtMC41NzRWOS41MzljMC0wLjI0OSwwLjAxLTAuNDcxLDAuMzYxLTAuNjU1YzAuMzItMC4xNzQsMC43ODItMC4xNjgsMS4yMTItMC4xNjhoMi43OTZ2MC43OEgyNC4zNWMtMC4yMDEsMC0wLjUzMiwwLjAxMS0wLjUzMiwwLjE1N3YxLjU4MmMwLDAuMjQ0LDAuMDcsMC4zMTksMC41NDIsMC4zMTloMi4zODV2MC43NzVIMjMuNzI5eiIvPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik0zMS4wMTQsMTIuMzN2LTEuNDI1aC0yLjAyM3YxLjQyNWgtMS40NDJWOC43MTZoMS40NDJ2MS40MDloMi4wMjNWOC43MTZoMS40MzR2My42MTRIMzEuMDE0eiIvPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik0zNy4zNTgsMTIuMzNsLTAuNDUtMC43NzVoLTIuMDM0bC0wLjQ1MSwwLjc3NWgtMS41MDNsMS44NDQtMy4xNjVjMC4xNjktMC4yOTIsMC41NC0wLjQ4MiwxLjEzMi0wLjQ4MmMwLjU4MSwwLDAuOTUxLDAuMTksMS4xMjIsMC40ODJsMS44NDQsMy4xNjVIMzcuMzU4eiBNMzUuNzk1LDkuNjQ3bC0wLjQ5LDEuMTcxaDEuMTcyTDM1Ljc5NSw5LjY0N3oiLz48cGF0aCBmaWxsPSIjRkZGRkZGIiBkPSJNNDIuOTczLDEyLjM3OWMtMC43MTEsMC0xLjA3MS0wLjI2LTEuMjQyLTAuNjA2bC0xLjAyMS0yLjA3NnYyLjYzNGgtMS4zNzNWOS40MzdjMC0wLjQyMywwLjM3MS0wLjc1OSwxLjIxMy0wLjc1OWMwLjY5MSwwLDEuMDkyLDAuMjQ5LDEuMjUyLDAuNTkxbDEuMDAyLDIuMDkyVjguNzE2aDEuMzczdjIuOTkxQzQ0LjE3NiwxMi4wNzUsNDMuNjc0LDEyLjM3OSw0Mi45NzMsMTIuMzc5eiIvPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik00OC43NDYsMTIuMzc5Yy0wLjcxMSwwLTEuMDcyLTAuMjYtMS4yNDItMC42MDZsLTEuMDIxLTIuMDc2djIuNjM0SDQ1LjExVjkuNDM3YzAtMC40MjMsMC4zNy0wLjc1OSwxLjIxMi0wLjc1OWMwLjY5MSwwLDEuMDkyLDAuMjQ5LDEuMjUyLDAuNTkxbDEuMDAyLDIuMDkyVjguNzE2aDEuMzczdjIuOTkxQzQ5Ljk0OSwxMi4wNzUsNDkuNDQ3LDEyLjM3OSw0OC43NDYsMTIuMzc5eiIvPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik01Mi40ODcsMTIuMzNjLTAuOTQyLDAtMS42MDQtMC4yMDYtMS42MDQtMC43NTNWOS41MDJjMC0wLjQ3OCwwLjQ5MS0wLjc4NiwxLjM5Mi0wLjc4NmgyLjk3OHYwLjc4aC0yLjM1NWgtMC4yNGMtMC4yMywwLTAuMzMsMC4xMy0wLjMzLDAuMjMydjAuMzk2aDIuOTI2djAuNzhoLTIuOTI2djAuNGMwLDAuMjQ0LDAuMjEsMC4yNDksMC41ODEsMC4yNDloMi4zNDV2MC43NzVINTIuNDg3eiIvPjxwYXRoIGZpbGw9IiNGRkZGRkYiIGQ9Ik01Ny43ODksMTIuMzNjLTAuNDgsMC0wLjkyMi0wLjA0My0xLjI5MS0wLjIyM2MtMC4zNjEtMC4xNzMtMC4zODItMC40MTctMC4zODItMC42NlY4LjcxNmgxLjQ0MnYyLjUwOXYwLjE2MmMwLDAuMDQ5LDAuMDQxLDAuMDc3LDAuMDksMC4xMDljMC4xMzEsMC4wODEsMC4zNTIsMC4wNTksMC41MzEsMC4wNTloMi4yNzR2MC43NzVINTcuNzg5eiIvPjwvZz48L3N2Zz4="
  }
  
  layout = {
    ip = {
      PrettyName = "IP Address",
      Style = "Text",
      Color = LtBlue,
      Position = { 63, 34 },
      Size = { 127, 32 },
      TextFontSize = 18,
    },
    connect = {
        PrettyName = "Connect",
        Style = "Button",
        ButtonStyle = "Toggle",
        Color = BtnBlue,
        OffColor = BtnGray,
        UnlinkOffColor = true,
        Position = { 196, 34 },
        Size = { 97, 32 },
        Radius = 2,
        Margin = 2,
        TextFontSize = 16,
      },
    nic = {
      PrettyName = "Local NIC",
      Style = "ComboBox",
      Color = LtBlue,
      Position = { 339, 34 },
      Size = { 159, 32 },
      TextFontSize = 20,
    },
    rxport = {
      Style = "Textbox",
      TextBoxStyle = "Normal",
      TextFontSize = 20,
      Position = { 541, 34 },
      Size = { 69, 32 },
    },
    swaddr = {
      PrettyName = "Switch Address",
      Style = "Text",
      IsReadOnly = true,
      Color = LtBlue,
      Position = { 63, 76 },
      Size = { 36, 32 },
      TextFontSize = 30,
    },
    id = {
      PrettyName = "ID",
      Legend = "ID",
      TextFontSize = 16,
      IsBold = true,
      Style = "Button",
      ButtonStyle = "Toggle",
      Color = BtnBlue,
      OffColor = BtnGray,
      UnlinkOffColor = true,
      Position = { 114, 76 },
      Size = { 71, 32 },
      Radius = 2,
      Margin = 2,
    },
    status = {
      PrettyName = "Status",
      Style = "Text",
      Position = { 242, 76 },
      Size = { 368, 32 },
      TextFontSize = 16,
    },
    armc = {
      PrettyName = "ARM-C",
      Style = "Button",
      ButtonStyle = "Toggle",
      Color = BtnLtBlue,
      OffColor = BtnDkBlue,
      UnlinkOffColor = true,
      Position = { 516, 168 },
      Size = { 70, 32 },
      Radius = 2,
      Margin = 2,
      TextFontSize = 16,
    },
    psload = {
      PrettyName = "Preset~Load",
      Legend = "Preset Load",
      IsBold = true,
      Style = "Button",
      ButtonStyle = "Trigger",
      Color = BtnLtBlue,
      OffColor = BtnDkBlue,
      UnlinkOffColor = true,
      Position = { 170, 425 },
      Size = { 124, 32 },
      Radius = 2,
      Margin = 2,
      TextFontSize = 16,
    },
    pssave = {
      PrettyName = "Preset~Save",
      Legend = "Preset Save",
      IsBold = true,
      Style = "Button",
      ButtonStyle = "Momentary",
      Color = BtnLtBlue,
      OffColor = BtnDkBlue,
      UnlinkOffColor = true,
      Position = { 335, 425 },
      Size = { 124, 32 },
      Radius = 2,
      Margin = 2,
      TextFontSize = 16,
    },
    bootver = {
      PrettyName = "Version~Boot",
      Style = "Textbox",
      IsReadOnly = true,
      TextBoxStyle = "NoBackground",
      HTextAlign = "Right",
      VTextAlign = "Center",
      Color = White,
      Position = { 93, 423 },
      Size = { 43, 20 },
      TextFontSize = 16,
      IsBold = true,
    },
    fwver = {
      PrettyName = "Version~Firmware",
      Style = "Textbox",
      IsReadOnly = true,
      TextBoxStyle = "NoBackground",
      HTextAlign = "Right",
      VTextAlign = "Center",
      Color = White,
      Position = { 93, 443 },
      Size = { 43, 20 },
      TextFontSize = 16,
      IsBold = true,
    },
  }
  for i=1,4 do
    layout["phantom "..i] = {
      PrettyName = "Phantom~"..i,
      Style = "Button",
      ButtonStyle = "Toggle",
      Color = BtnLtBlue,
      OffColor = BtnDkBlue,
      UnlinkOffColor = true,
      Position = { 97+(i-1)*97, 168 },
      Size = { 70, 32 },
      Radius = 2,
      Margin = 2,
      TextFontSize = 16,
    }
    layout["ledg "..i] = {
      PrettyName = string.format("LED~%i~Green~State",i),
      Style = "Button",
      ButtonStyle = "Toggle",
      Color = LEDGrn,
      Position = { i*123-7, 270 },
      Size = { 45, 45 },
      Radius = 2,
      Margin = 2,
    }
    layout["brightg "..i] = {
      PrettyName = string.format("LED~%i~Green~Brightness",i),
      Style = "Fader",
      Position = { i*123-7, 327 },
      Size = { 45, 18 },
      Color = { 0, 255, 0 },
    }
    layout["ledr "..i] = {
      PrettyName = string.format("LED~%i~Red~State",i),
      Style = "Button",
      ButtonStyle = "Toggle",
      Color = LEDRed,
      Position = { 50+i*123, 270 },
      Size = { 45, 45 },
      Radius = 2,
      Margin = 2,
    }
    layout["brightr "..i] = {
      PrettyName = string.format("LED~%i~Red~Brightness",i),
      Style = "Fader",
      Position = { i*123+50, 327 },
      Size = { 45, 18 },
      Color = { 255, 0, 0 },
    }
    layout["bstat "..i] = {
      PrettyName = "Button Status~"..i,
      IsReadOnly = true,
      Style = "Button",
      Color = LEDAmb,
      Position = { 30+i*124, 362 },
      Size = { 26, 17 },
      Radius = 2,
    }
  end

  graphics =
  {
    { -- Overall GroupBox
      Type = "GroupBox",
      Fill = { 0, 63, 91 },
      StrokeWidth = 1,
      CornerRadius = 3,
      Position = { 0, 0 },
      Size = { 628, 475 }
    },
    { -- ClockAudio logo
      Type = "Svg",
      Image = l.ca,
      Position = { 29, 6 },
      Size = { 265, 24 }
    },
    { -- CDT100
      Type = "Svg",
      Image = l.cdt,
      Position = { 310, 10 },
      Size = { 143, 15 }
    },
    { -- 4 CHANNEL
      Type = "Svg",
      Image = l.fc,
      Position = { 464, 10 },
      Size = { 60, 6 }
    },
    { -- DT
      Type = "Svg",
      Image = l.dt,
      Position = { 464, 19 },
      Size = { 127, 6 }
    },
    {
      Type = "Text",
      Text = "IP Address",
      WordWrap = true,
      TextSize = 14,
      HTextAlign = "Right",
      IsBold = true,
      Color = White,
      Position = { 12, 34 },
      Size = { 51, 32 }
    },
    {
      Type = "Text",
      Text = "Local NIC",
      WordWrap = true,
      TextSize = 14,
      HTextAlign = "Right",
      IsBold = true,
      Color = White,
      Position = { 301, 34 },
      Size = { 38, 32 }
    },
    {
      Type = "Text",
      Text = "Recv Port",
      WordWrap = true,
      TextSize = 14,
      HTextAlign = "Right",
      IsBold = true,
      Color = White,
      Position = { 508, 34 },
      Size = { 33, 32 }
    },
    {
      Type = "Text",
      Text = "Switch Address",
      WordWrap = true,
      TextSize = 14,
      HTextAlign = "Right",
      IsBold = true,
      Color = White,
      Position = { 12, 76 },
      Size = { 51, 32 }
    },
    {
      Type = "Text",
      Text = "Status",
      TextSize = 14,
      HTextAlign = "Right",
      IsBold = true,
      Color = White,
      Position = { 194, 76 },
      Size = { 48, 32 }
    },
    { -- Phantom Power
      Type = "GroupBox",
      Fill = GroupFill,
      StrokeColor = White,
      StrokeWidth = 1,
      CornerRadius = 5,
      Position = { 81, 159 },
      Size = { 394, 49 }
    },
    {
      Type = "Text",
      Text = "Phantom Power",
      TextSize = 23,
      IsBold = true,
      Color = White,
      Position = { 182, 114 },
      Size = { 194, 24 }
    },
    { -- ARM-C
      Type = "GroupBox",
      Fill = GroupFill,
      StrokeColor = White,
      StrokeWidth = 1,
      CornerRadius = 5,
      Position = { 501, 159 },
      Size = { 99, 49 }
    },
    {
      Type = "Text",
      Text = "ARM-C",
      TextSize = 23,
      IsBold = true,
      Color = White,
      Position = { 502, 114 },
      Size = { 97, 24 }
    },
    {
      Type = "Text",
      Text = "Microphone",
      TextSize = 18,
      Color = White,
      Position = { 502, 136 },
      Size = { 97, 24 }
    },
    { -- CH32
      Type = "GroupBox",
      Fill = GroupFill,
      StrokeColor = White,
      StrokeWidth = 1,
      CornerRadius = 5,
      Position = { 105, 261 },
      Size = { 495, 130 }
    },
    {
      Type = "GroupBox",
      Fill = White,
      StrokeWidth = 0,
      Position = { 105, 321 },
      Size = { 495, 1 }
    },
    {
      Type = "GroupBox",
      Fill = White,
      StrokeWidth = 0,
      Position = { 105, 350 },
      Size = { 495, 1 }
    },
    {
      Type = "Text",
      Text = "CH32",
      TextSize = 25,
      IsBold = true,
      Color = White,
      Position = { 317, 216 },
      Size = { 71, 25 }
    },
    {
      Type = "Text",
      Text = "LED Color",
      WordWrap = true,
      HTextAlign = "Right",
      TextSize = 18,
      IsBold = true,
      Color = White,
      Position = { 55, 270 },
      Size = { 47, 45 }
    },
    {
      Type = "Text",
      Text = "Brightness",
      WordWrap = true,
      HTextAlign = "Right",
      TextSize = 18,
      IsBold = true,
      Color = White,
      Position = { 17, 322 },
      Size = { 85, 28 }
    },
    {
      Type = "Text",
      Text = "Button State",
      WordWrap = true,
      HTextAlign = "Right",
      TextSize = 18,
      IsBold = true,
      Color = White,
      Position = { 4, 351 },
      Size = { 98, 37 }
    },
    { -- Preset
      Type = "GroupBox",
      Fill = GroupFill,
      StrokeColor = White,
      StrokeWidth = 1,
      CornerRadius = 5,
      Position = { 154, 401 },
      Size = { 321, 64 }
    },
    {
      Type = "Text",
      Text = "Preset",
      IsBold = true,
      TextSize = 18,
      Color = White,
      Position = { 154, 401 },
      Size = { 321, 23 }
    },
    {
      Type = "Text",
      Text = "(applies to Phantom Power and ARM-C only)",
      TextSize = 7,
      Color = White,
      Position = { 154, 454 },
      Size = { 321, 11 }
    },
    { -- Firmware Version
      Type = "Header",
      Text = "Device",
      --HTextAlign = "Left",
      TextSize = 18,
      Color = White,
      Position = { 17, 404 },
      Size = { 119, 19 }
    },
    {
      Type = "Text",
      Text = "Boot:",
      HTextAlign = "Left",
      TextSize = 16,
      Color = White,
      Position = { 17, 423 },
      Size = { 76, 20 }
    },
    {
      Type = "Text",
      Text = "Firmware:",
      HTextAlign = "Left",
      TextSize = 16,
      Color = White,
      Position = { 17, 443 },
      Size = { 76, 20 }
    },
    { -- Plugin Version
      Type = "Header",
      Text = "Plugin",
      --HTextAlign = "Left",
      TextSize = 18,
      Color = White,
      Position = { 491, 404 },
      Size = { 122, 19 }
    },
    {
      Type = "Text",
      Text = "Version:",
      HTextAlign = "Left",
      TextSize = 16,
      Color = White,
      Position = { 491, 428 },
      Size = { 61, 20 }
    },
    {
      Type = "Text",
      Text = PluginInfo.Version,
      HTextAlign = "Right",
      IsBold = true,
      TextSize = 16,
      Color = White,
      Position = { 552, 428 },
      Size = { 58, 20 }
    },
  }
  for i=1,4 do
    table.insert(graphics,
      {
        Type = "Text",
        Text = "Channel "..i,
        TextSize = 18,
        Color = White,
        Position = { i*98-16, 136 },
        Size = { 98, 23 }
      })
    table.insert(graphics,
      {
        Type = "Text",
        Text = "Channel "..i,
        TextSize = 18,
        Color = White,
        Position = { i*123-16, 237 },
        Size = { 123, 23 }
      })
  end
  for i=1,3 do
    table.insert(graphics,
    {
      Type = "GroupBox",
      Fill = White,
      StrokeWidth = 0,
      Position = { 84+i*97, 159 },
      Size = { 1, 49 }
    })
    table.insert(graphics,
    {
      Type = "GroupBox",
      Fill = White,
      StrokeWidth = 0,
      Position = { 106+i*123, 261 },
      Size = { 1, 130 }
    })

  end
  return layout , graphics
end

function GetComponents(props)
  return 
  { 
    {   
      Name = "nic_storage",
      Type = "scriptable_controls", 
      Properties =   
      {
        ["config"] = '[{"Name":"Core","Count":1.0,"ControlType":"Text","ButtonType":"Momentary","TextType":"TextBox","IndicatorType":"Led","ControlUnit":"dB","Min":-100.0,"Max":12.0,"PinStyle":"None"},{"Name":"Emul","Count":1.0,"ControlType":"Text","ButtonType":"Momentary","TextType":"TextBox","IndicatorType":"Led","ControlUnit":"dB","Min":-100.0,"Max":12.0,"PinStyle":"None"}]'
      }
    }
  }
end

if Controls then
-- ( Subtract 27 )
require("json")
-- Control Aliases
ip = Controls.ip
connect = Controls.connect
nic = Controls.nic
rxport = Controls.rxport
address = Controls.swaddr
id = Controls.id
phantom = Controls.phantom
ARM = Controls.armc
psload = Controls.psload
pssave = Controls.pssave
status = Controls.status
bootver = Controls.bootver
fwver = Controls.fwver
CH32 = {
    LED = {
        Green = { State = {}, Bright = {}, Touch = {}, Timer = {} },
        Red = { State = {}, Bright = {}, Touch = {}, Timer = {} },
      },
    Button = {}
  }
for i=1,4 do
  table.insert(CH32.LED.Green.State,Controls.ledg[i])
  table.insert(CH32.LED.Red.State,Controls.ledr[i])
  table.insert(CH32.LED.Green.Bright,Controls.brightg[i])
  table.insert(CH32.LED.Red.Bright,Controls.brightr[i])
  table.insert(CH32.LED.Green.Touch,true)
  table.insert(CH32.LED.Red.Touch,true)
  table.insert(CH32.LED.Green.Timer,Timer.New())
  table.insert(CH32.LED.Red.Timer,Timer.New())
  table.insert(CH32.Button,Controls.bstat[i])
end

-- Add Style to Textboxes
local TextBoxStyle = json.encode({StrokeWidth = 2,StrokeColor = "White",CornerRadius = 6})
address.Style = TextBoxStyle
ip.Style = TextBoxStyle
nic.Style = TextBoxStyle
rxport.Style = TextBoxStyle
status.Style = TextBoxStyle

-- Constants
local e = System.IsEmulating
local CDT100 = UdpSocket.New()
local QueueTimer = Timer.New()
local PresetTimer = Timer.New()
local PollTimer = Timer.New()
local HealthTimer = Timer.New()
local ReconnectTimer = Timer.New()
local NACKTimer = Timer.New()
local status_state = { OK = 0, COMPROMISED = 1, FAULT = 2, NOTPRESENT = 3, MISSING = 4, INITIALIZING = 5 }
local ippattern = "[012]?%d?%d+.[012]?%d?%d+.[012]?%d?%d+.[012]?%d?%d"
tostring(e and "Emul" or "Core")
local nic_storage = nic_storage[tostring(e and "Emul" or "Core")]
local brightcolor = {R = "Red", G = "Green"}
local PollTime = 1
local HealthTime = 4
local ReconnectTime = 5
local PSCountdown,PSSecCount = 5

-- Variables
local IsConnected = false
local LocalIP = ""
local Queue = {}
local Startup = true
local RXPort = 49494 -- Default UDP Port
local PollAll = true

-- Helper Functions
local function find(a,t)
  local f = false for _,_a in pairs(t) do f=a==_a if f then break end end return f
end

local function DebugFormat(string) -- Format strings containing non-printable characters so we can see what they are
  local visual = ""
  if type(string) == "string" then
    for i=1,#string do
      local byte = string:sub(i,i)
      if string.byte(byte) >= 32 and string.byte(byte) <= 126 then
        visual = visual..byte
      else
        visual = visual..string.format("(%02xh)",string.byte(byte))
      end
    end
  else
    visual = "Type is: "..type(string)
  end
  return visual
end

function Status( msg, state )
  status.Value = status_state[state]
  status.String = msg
  if DebugDesc or (status_state[state]>0) then print( msg ) end
end

-- TX and Queue Functions
function UDPSend(ip,uport,data)
  --print("TX: "..data:gsub("\r",""))
  CDT100:Send(ip,uport,data)
end

function SendCommand(cmd, ext)
  if IsConnected or cmd=="SASIP" then
    local senddata = cmd..tostring(ext and " "..ext or "")
    local ipgood, result = pcall(UDPSend, ip.String,49494,senddata.."\r" ) -- Use pcall to test whether ip is reachable to avoid crashing
    if not ipgood then
      print("IP not reachable; Command: "..result)
    end
  end
end

function QueueProcess()
  QueueTimer:Stop()
  if #Queue>0 then
    QueueRun = true
    local qitem = table.remove(Queue,1)
    SendCommand(qitem[1],qitem[2])
  else
    QueueRun = false
    PollTimer:Start(PollTime)
  end
end

function ToQueue(cmd,ext)
  table.insert(Queue,{cmd,ext})
  if not QueueRun and IsConnected then QueueProcess() end
end

function ConnectedLegend(ctl)
  if not IsConnected then
    ctl.Legend = ctl.Boolean and "ON" or "OFF"
  end
end

function LEDBright()

end

NACKTimer.EventHandler = function() Status( "Connected", "OK" ) NACKTimer:Stop() end

function ParseResponses(pdata)
  if IsConnected then QueueProcess() HealthTimer:Start(HealthTime) end
  local ack, cmd, param = string.match(pdata,"([N]*ACK) (%w+)[ ]*(.*)")
  if ack==nil then
    local args = {}
    for arg in string.gmatch(pdata,"[^ ]+") do
      table.insert(args,arg)
    end
    if args[1] == "BSTATUS" then
      local bId,bool = string.match(args[2],"B(%d)=(%d)")
      CH32.Button[tonumber(bId)].Boolean = bool=="1"
    else
      print("Other: "..pdata)
    end
  else
    --print("RX: "..DebugFormat(pdata))
  end
  if ack == "ACK" then
    if cmd=="SASIP" then
      if param:find("0.0.0.0") then
        CDT100:Close()
        HealthTimer:Stop()
        print("Disconnected")
        connect.Legend = "Disconnected"
        Status( "Disconnected", "OK" )
      else
        IsConnected = true
        ReconnectTimer:Stop()
        QueueProcess()
        Status( "Connected", "OK" )
        print("Connected.")
        connect.Legend = "Connected"
        status.Value = 0
        HealthTimer:Start(HealthTime)
      end
    elseif cmd=="GAS" then
      address.String = param
    elseif cmd=="QUERY" then
      local PP1, PP2, PP3, PP4, ID = string.match(param,"PP1=(%a+) PP2=(%a+) PP3=(%a+) PP4=(%a+) ID=(%a+)")
      local PPTable = { PP1=="ON", PP2=="ON", PP3=="ON", PP4=="ON" }
      id.Boolean = ID=="ON"
      for key,val in ipairs(PPTable) do
        phantom[key].Boolean = val
        phantom[key].Legend = val and "ON" or "OFF"
      end
    elseif cmd=="GCH32" then
      if ignoreGCH then
        ignoreGCH=false
      else
        local paramTbl = {}
        for arg in string.gmatch(param,"[^ ]+") do
          if arg~="0" then
            local bId,btype,bool = arg:match("CH(%d)(%a+)=(%d)")
            bool, bId = bool=="1", tonumber(bId)
            local btypes = {R = "LED", G = "LED",   SC = "Button"      }
            local bcolor = {R = "Red", G = "Green", SC = tonumber(bId) }
            if btypes[btype]=="Button" then
              CH32[btypes[btype]][bcolor[btype]].Boolean = bool
            elseif btypes[btype]=="LED" then
              CH32[btypes[btype]][bcolor[btype]].State[bId].Boolean = bool
            end
          end
        end
      end
    elseif cmd:find("CH32B$") then
      local ch = tonumber(param:sub(1,1))
      if ch==0 then
        for bru in string.gmatch(param:sub(3),"%w+=%d+") do
          local ch,clr,lev = bru:match("CH(%d)(%a)=(%d+)")
          CH32.LED[brightcolor[clr]].Bright[tonumber(ch)].Position = lev/100 
        end
      else
        local clr,lev = param:match(ch.." (%a)=(%d+)")
        if CH32.LED[brightcolor[clr]].Touch[ch] then CH32.LED[brightcolor[clr]].Bright[ch].Position = lev/100 end
      end
    elseif cmd=="GARMC" or cmd=="SARMC" then
      ARM.Boolean = param=="1"
      ARM.Legend = param=="1" and "ON" or "OFF"
    elseif cmd=="ID" then
      id.Boolean = param=="1"
    elseif cmd=="PP" then
      local ch,st = param:match("(%d) (%d)")
      phantom[tonumber(ch)].Boolean = st=="1"
      phantom[tonumber(ch)].Legend = st=="1" and "ON" or "OFF"
    elseif cmd=="VERSION" then
      fwver.String = "v"..param
     elseif cmd=="BVERSION" then
      bootver.String = "v"..param
    elseif cmd=="SCH32" then
      local ch,btype,b = param:match("(%d) (%a)=(%d)")
      local bcolor = {R = "Red", G = "Green" }
      CH32.LED[bcolor[btype]][tonumber(ch)] = b=="1"
    elseif cmd=="SAVE" then
      Status( "Preset Saved", "OK" )
    elseif cmd=="LOAD" then
      Status( "Preset Loaded", "OK" )
      ToQueue("GCH32","0")
      ToQueue("GARMC")
      ToQueue("QUERY")
    else
      print("Unknown",cmd,param,"--> "..pdata)
    end
  elseif ack == "NACK" then
    if cmd=="LOAD" then
      Status( "Preset not yet set!", "FAULT" )
      NACKTimer:Start(3)
    end
  end
end

function PresetSaveHandler()
  if PSSecCount==1 then
    PresetTimer:Stop()
    pssave.Legend = "Preset Saved"
    pssave.Color = "Yellow"
    ToQueue("SAVE",0)
  else
    PSSecCount=PSSecCount-1
    pssave.Legend = "Save in "..PSSecCount.." Seconds"
  end
end

CDT100.EventHandler = function(udp, packet)
  local pdata = string.match(string.gsub(packet.Data,"\n",""),"([^\r]+)") -- eliminate stray newlines
  if packet.Address == ip.String then ParseResponses(pdata) end -- Filters out response packets from other CDT100's
end

function PollCommands()
  PollTimer:Stop()
  if PollAll then ignoreGCH=true ToQueue("GCH32","0") end -- Get CH32 Status (Poll it twice to get current state)
  if PollAll then ToQueue("GCH32","0") end -- Get CH32 Status
  if PollAll then ToQueue("GCH32B","0") end -- Get CH32 LED Brightness Status
  if PollAll then ToQueue("GARMC") end     -- Get ARM-C State
  if PollAll then ToQueue("QUERY") end     -- Retrieve Current Settings
  ToQueue("GAS")                           -- Get Address Switch
  PollAll = false
end

function InitCommands()
  SendCommand("SASIP",LocalIP..":"..RXPort) -- Turn on async msgs
  ToQueue("VERSION")
  ToQueue("BVERSION")
  PollCommands()
end

function GetNICIP(ctl)
  return string.match(ctl.String,ippattern)
end

local function GetIPs()
  local nics,iptable = Qlib.networkinterfaces(), {}
  for _,n in ipairs(nics) do
    if not string.find(n.Interface,"Loopback") then
      iptable[n.Interface] = n.Address
    end
  end
  return iptable
end

function SourceNIC()
  iptable = GetIPs()
  local list = {}
  for k,v in pairs(iptable) do
    table.insert(list,tostring(e and v or k).." - "..tostring(e and k or v))
  end
  if #list==1 then
    LocalIP=GetNICIP{String=list[1]}
    nic.String=list[1]
    nic_storage.String = list[1]
  elseif #list>1 then
    local validnic = find(nic_storage.String,list)
    if nic_storage.String ~="" and validnic then
      nic.String = nic_storage.String
    end
    if not validnic then
      nic.String = "Choose NIC..."
      connect.Boolean=false
      nic_storage.String=""
    end
    nic.Choices = list
  else
    nic.String="No NICs found"
    nic_storage.String = ""
    LocalIP = ""
    Status( "No Network Interfaces Found", "FAULT" )
  end
end

function AssignIP()
  if not string.find(nic.String,"Choose NIC") then
    LocalIP=GetNICIP(nic)
    print("Local IP: ",LocalIP)
    nic_storage.String = nic.String
  end
end

local function BrightRender(clr,lev,ch)
  local color = {r=0,g=0,b=0}
  color[clr] = math.floor((lev/10)*0xFF)
  Controls["bright"..clr][ch].Color = string.format("#%02x%02x%02x",color.r,color.g,color.b)
end

function Initialization()
  SourceNIC()
  if string.find(nic.String,"Choose") then rxport.Value = RXPort end
  nic.EventHandler = AssignIP
  id.Boolean = false
  id.EventHandler = function() if not Startup and IsConnected then ToQueue("ID",id.Boolean and 1 or 0) end end
  ARM.EventHandler = function(ctl) if not Startup and IsConnected then ToQueue("SARMC",math.floor(ctl.Value)) ConnectedLegend(ctl) end end
  psload.EventHandler = function()
    if not Startup and IsConnected then ToQueue("LOAD",0) end end
  pssave.EventHandler = function(ctl)
    if not Startup and IsConnected and ctl.Boolean then
      PSSecCount=PSCountdown
      PresetTimer:Start(1)
      pssave.Legend = "Save in "..PSCountdown.." Seconds"
    elseif not ctl.Boolean then 
      PresetTimer:Stop()
      pssave.Legend = ""
      pssave.Color = ""
    end
  end
  for i=1,4 do
    phantom[i].EventHandler = function(ctl) if not Startup and IsConnected then ToQueue("PP",string.format("%i %i",i,ctl.Value)) ConnectedLegend(ctl) end end
    for _,clr in ipairs{"g","r"} do
      local UClr = clr:upper()
      local cname = brightcolor[UClr]
      CH32.LED[cname].State[i].EventHandler = function(ctl) if not Startup and IsConnected then ToQueue("SCH32",string.format("%i %s=%i",i,UClr,ctl.Value)) end end
      CH32.LED[cname].Bright[i].EventHandler = function(ctl)
        if not Startup and IsConnected then
          CH32.LED[cname].Timer[i]:Start(.25)
          CH32.LED[cname].Touch[i]=false
          ToQueue("SCH32B",string.format("%i %s=%i0",i,UClr,ctl.Value))
          BrightRender(clr,ctl.Value,i)
        end
      end
      CH32.LED[cname].Timer[i].EventHandler = function(tmr) tmr:Stop() CH32.LED[cname].Touch[i]=true end
    end
  end
  connect.EventHandler = Connect
  Startup = false
  AssignIP()
  if connect.Boolean then Connect() end
end

function NetButtons(bool)
  rxport.IsDisabled = bool
  ip.IsDisabled = bool
  nic.IsDisabled = bool
  if not connect.Boolean then
    PollTimer:Stop()
    HealthTimer:Stop()
    ReconnectTimer:Stop()
    Queue = {}
    connect.Legend = "Disconnected"
    if status.Value==5 then Status( "Disconnected", "OK") end
  end
end

function Connect()
  if Startup then
    Initialization()
  else
    if not string.find(ip.String,ippattern) then
      Status( "Invalid Device IP Address", "FAULT" )
      connect.Boolean = false
      NetButtons(false)
    elseif string.find(nic.String,"Choose") then
      Status( "No local Network Interface selected", "FAULT" )
      connect.Boolean = false
      NetButtons(false)
    else
      if connect.Boolean and not IsConnected then
        PollAll = true
        RXPort = math.floor(rxport.Value)
        connect.Legend = "Connecting..."
        Status( "Connecting...", "INITIALIZING" )
        CDT100:Open(LocalIP, RXPort)
        NetButtons(true)
        InitCommands()
        HealthTimer:Start(HealthTime)
      else
        NetButtons(false)
        if IsConnected then
          IsConnected = false
          Queue = {}
          SendCommand("SASIP","0.0.0.0:"..RXPort) -- Turn off async msgs
        end
      end
    end
  end
end

function Reconnect()
  connect.Boolean = true
  Connect()
end

function InitBright()
  for _,k in ipairs{"g","r"} do
  	for _,ctl in pairs(Controls["bright"..k]) do
  	  ctl.Boolean = true
  	end
  end
end

function ConnectHealth()
  Status( "CDT100 Not Responding, Reconnecting in "..ReconnectTime, "FAULT" )
  NetButtons(false)
  connect.Legend = "Reconnecting..."
  ReconnectTimer:Start(ReconnectTime)
  IsConnected = false
  QueueRun = false
  QueueTimer:Stop()
  HealthTimer:Stop()
  local Queue = {}
end

if ip.String=="" and fwver.String=="" then rxport.Value=RXPort InitBright() end
if nic_storage.String == "" then
  connect.Legend = "Disconnected"
  connect.Boolean = false
end
ip.EventHandler = Connect
PollTimer.EventHandler = PollCommands
HealthTimer.EventHandler = ConnectHealth
ReconnectTimer.EventHandler = Reconnect
PresetTimer.EventHandler = PresetSaveHandler
QueueTimer.EventHandler = QueueProcess
Connect()

end